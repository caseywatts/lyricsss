{"version":3,"sources":["lyricsss/tests/app.jscs-test.js","lyricsss/tests/app.jshint.js","lyricsss/tests/components/team-component.jscs-test.js","lyricsss/tests/components/team-component.jshint.js","lyricsss/tests/components/timer-component.jscs-test.js","lyricsss/tests/components/timer-component.jshint.js","lyricsss/tests/components/top-layout.jscs-test.js","lyricsss/tests/components/top-layout.jshint.js","lyricsss/tests/components/word-history.jscs-test.js","lyricsss/tests/components/word-history.jshint.js","lyricsss/tests/helpers/destroy-app.js","lyricsss/tests/helpers/destroy-app.jscs-test.js","lyricsss/tests/helpers/destroy-app.jshint.js","lyricsss/tests/helpers/module-for-acceptance.js","lyricsss/tests/helpers/module-for-acceptance.jscs-test.js","lyricsss/tests/helpers/module-for-acceptance.jshint.js","lyricsss/tests/helpers/resolver.js","lyricsss/tests/helpers/resolver.jscs-test.js","lyricsss/tests/helpers/resolver.jshint.js","lyricsss/tests/helpers/start-app.js","lyricsss/tests/helpers/start-app.jscs-test.js","lyricsss/tests/helpers/start-app.jshint.js","lyricsss/tests/integration/components/team-component-test.js","lyricsss/tests/integration/components/team-component-test.jscs-test.js","lyricsss/tests/integration/components/team-component-test.jshint.js","lyricsss/tests/integration/components/timer-component-test.js","lyricsss/tests/integration/components/timer-component-test.jscs-test.js","lyricsss/tests/integration/components/timer-component-test.jshint.js","lyricsss/tests/integration/components/top-layout-test.js","lyricsss/tests/integration/components/top-layout-test.jscs-test.js","lyricsss/tests/integration/components/top-layout-test.jshint.js","lyricsss/tests/integration/components/word-history-test.js","lyricsss/tests/integration/components/word-history-test.jscs-test.js","lyricsss/tests/integration/components/word-history-test.jshint.js","lyricsss/tests/models/past-word.jscs-test.js","lyricsss/tests/models/past-word.jshint.js","lyricsss/tests/resolver.jscs-test.js","lyricsss/tests/resolver.jshint.js","lyricsss/tests/router.jscs-test.js","lyricsss/tests/router.jshint.js","lyricsss/tests/routes/main.jscs-test.js","lyricsss/tests/routes/main.jshint.js","lyricsss/tests/services/team-service.jscs-test.js","lyricsss/tests/services/team-service.jshint.js","lyricsss/tests/services/timer-service.jscs-test.js","lyricsss/tests/services/timer-service.jshint.js","lyricsss/tests/services/word-service.jscs-test.js","lyricsss/tests/services/word-service.jshint.js","lyricsss/tests/test-helper.js","lyricsss/tests/test-helper.jscs-test.js","lyricsss/tests/test-helper.jshint.js","lyricsss/tests/unit/routes/application-test.js","lyricsss/tests/unit/routes/application-test.jscs-test.js","lyricsss/tests/unit/routes/application-test.jshint.js","lyricsss/tests/unit/routes/lyrics-card-test.js","lyricsss/tests/unit/routes/lyrics-card-test.jscs-test.js","lyricsss/tests/unit/routes/lyrics-card-test.jshint.js","lyricsss/tests/unit/services/team-service-test.js","lyricsss/tests/unit/services/team-service-test.jscs-test.js","lyricsss/tests/unit/services/team-service-test.jshint.js","lyricsss/tests/unit/services/timer-service-test.js","lyricsss/tests/unit/services/timer-service-test.jscs-test.js","lyricsss/tests/unit/services/timer-service-test.jshint.js","lyricsss/tests/unit/services/words-service-test.js","lyricsss/tests/unit/services/words-service-test.jscs-test.js","lyricsss/tests/unit/services/words-service-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('lyricsss/tests/app.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - app.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'app.js should pass jscs.\\ndisallowDirectPropertyAccess: Avoid accessing Ember.Application directly at app.js :\\n     8 |Ember.MODEL_FACTORY_INJECTIONS = true;\\n     9 |\\n    10 |App = Ember.Application.extend({\\n-----------------------^\\n    11 |  modulePrefix: config.modulePrefix,\\n    12 |  podModulePrefix: config.podModulePrefix,');\n  });\n});","define('lyricsss/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('lyricsss/tests/components/team-component.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - components/team-component.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/team-component.js should pass jscs.\\ndisallowDirectPropertyAccess: Avoid accessing Ember.Component directly at components/team-component.js :\\n     1 |import Ember from \\'ember\\';\\n     2 |\\n     3 |export default Ember.Component.extend({\\n-------------------------------^\\n     4 |  teams: Ember.inject.service(\\'team-service\\'),\\n     5 |  timer: Ember.inject.service(\\'timer-service\\'),\\ndisallowDirectPropertyAccess: Avoid accessing Ember.inject directly at components/team-component.js :\\n     2 |\\n     3 |export default Ember.Component.extend({\\n     4 |  teams: Ember.inject.service(\\'team-service\\'),\\n-----------------------^\\n     5 |  timer: Ember.inject.service(\\'timer-service\\'),\\n     6 |  words: Ember.inject.service(\\'word-service\\'),\\ndisallowDirectPropertyAccess: Avoid accessing Ember.inject directly at components/team-component.js :\\n     3 |export default Ember.Component.extend({\\n     4 |  teams: Ember.inject.service(\\'team-service\\'),\\n     5 |  timer: Ember.inject.service(\\'timer-service\\'),\\n-----------------------^\\n     6 |  words: Ember.inject.service(\\'word-service\\'),\\n     7 |  actions: {\\ndisallowDirectPropertyAccess: Avoid accessing Ember.inject directly at components/team-component.js :\\n     4 |  teams: Ember.inject.service(\\'team-service\\'),\\n     5 |  timer: Ember.inject.service(\\'timer-service\\'),\\n     6 |  words: Ember.inject.service(\\'word-service\\'),\\n-----------------------^\\n     7 |  actions: {\\n     8 |    correctAnswer() {');\n  });\n});","define('lyricsss/tests/components/team-component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/team-component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/team-component.js should pass jshint.');\n  });\n});","define('lyricsss/tests/components/timer-component.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - components/timer-component.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/timer-component.js should pass jscs.\\ndisallowDirectPropertyAccess: Avoid accessing Ember.Component directly at components/timer-component.js :\\n     1 |import Ember from \\'ember\\';\\n     2 |\\n     3 |export default Ember.Component.extend({\\n-------------------------------^\\n     4 |  timer: Ember.inject.service(\\'timer-service\\'),\\n     5 |  actions: {\\ndisallowDirectPropertyAccess: Avoid accessing Ember.inject directly at components/timer-component.js :\\n     2 |\\n     3 |export default Ember.Component.extend({\\n     4 |  timer: Ember.inject.service(\\'timer-service\\'),\\n-----------------------^\\n     5 |  actions: {\\n     6 |    resetTimer() {');\n  });\n});","define('lyricsss/tests/components/timer-component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/timer-component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/timer-component.js should pass jshint.');\n  });\n});","define('lyricsss/tests/components/top-layout.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - components/top-layout.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/top-layout.js should pass jscs.\\ndisallowDirectPropertyAccess: Avoid accessing Ember.Component directly at components/top-layout.js :\\n     1 |import Ember from \\'ember\\';\\n     2 |\\n     3 |export default Ember.Component.extend({\\n-------------------------------^\\n     4 |  teams: Ember.inject.service(\\'team-service\\'),\\n     5 |  timer: Ember.inject.service(\\'timer-service\\'),\\ndisallowDirectPropertyAccess: Avoid accessing Ember.inject directly at components/top-layout.js :\\n     2 |\\n     3 |export default Ember.Component.extend({\\n     4 |  teams: Ember.inject.service(\\'team-service\\'),\\n-----------------------^\\n     5 |  timer: Ember.inject.service(\\'timer-service\\'),\\n     6 |  words: Ember.inject.service(\\'word-service\\'),\\ndisallowDirectPropertyAccess: Avoid accessing Ember.inject directly at components/top-layout.js :\\n     3 |export default Ember.Component.extend({\\n     4 |  teams: Ember.inject.service(\\'team-service\\'),\\n     5 |  timer: Ember.inject.service(\\'timer-service\\'),\\n-----------------------^\\n     6 |  words: Ember.inject.service(\\'word-service\\'),\\n     7 |  actions: {\\ndisallowDirectPropertyAccess: Avoid accessing Ember.inject directly at components/top-layout.js :\\n     4 |  teams: Ember.inject.service(\\'team-service\\'),\\n     5 |  timer: Ember.inject.service(\\'timer-service\\'),\\n     6 |  words: Ember.inject.service(\\'word-service\\'),\\n-----------------------^\\n     7 |  actions: {\\n     8 |    nextWord() {');\n  });\n});","define('lyricsss/tests/components/top-layout.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/top-layout.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/top-layout.js should pass jshint.');\n  });\n});","define('lyricsss/tests/components/word-history.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - components/word-history.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/word-history.js should pass jscs.\\ndisallowDirectPropertyAccess: Avoid accessing Ember.Component directly at components/word-history.js :\\n     1 |import Ember from \\'ember\\';\\n     2 |\\n     3 |export default Ember.Component.extend({\\n-------------------------------^\\n     4 |  words: Ember.inject.service(\\'word-service\\'),\\n     5 |});\\ndisallowDirectPropertyAccess: Avoid accessing Ember.inject directly at components/word-history.js :\\n     2 |\\n     3 |export default Ember.Component.extend({\\n     4 |  words: Ember.inject.service(\\'word-service\\'),\\n-----------------------^\\n     5 |});\\n     6 |\\ndisallowTrailingComma: Extra comma following the final element of an array or object literal at components/word-history.js :\\n     2 |\\n     3 |export default Ember.Component.extend({\\n     4 |  words: Ember.inject.service(\\'word-service\\'),\\n-----------------------------------------------------^\\n     5 |});\\n     6 |');\n  });\n});","define('lyricsss/tests/components/word-history.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/word-history.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/word-history.js should pass jshint.');\n  });\n});","define('lyricsss/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('lyricsss/tests/helpers/destroy-app.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - helpers/destroy-app.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/destroy-app.js should pass jscs.\\ndisallowDirectPropertyAccess: Avoid accessing Ember.run directly at helpers/destroy-app.js :\\n     2 |\\n     3 |export default function destroyApp(application) {\\n     4 |  Ember.run(application, \\'destroy\\');\\n---------------^\\n     5 |}\\n     6 |');\n  });\n});","define('lyricsss/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('lyricsss/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'lyricsss/tests/helpers/start-app', 'lyricsss/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _lyricsssTestsHelpersStartApp, _lyricsssTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _lyricsssTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _lyricsssTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('lyricsss/tests/helpers/module-for-acceptance.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/module-for-acceptance.js should pass jscs.\\nrequireSpread: Illegal use of apply method. Use the spread operator instead at helpers/module-for-acceptance.js :\\n    12 |\\n    13 |      if (options.beforeEach) {\\n    14 |        return options.beforeEach.apply(this, arguments);\\n---------------------------------------------^\\n    15 |      }\\n    16 |    },\\nrequireSpread: Illegal use of apply method. Use the spread operator instead at helpers/module-for-acceptance.js :\\n    17 |\\n    18 |    afterEach() {\\n    19 |      let afterEach = options.afterEach && options.afterEach.apply(this, arguments);\\n------------------------------------------------------------------------^\\n    20 |      return Promise.resolve(afterEach).then(() => destroyApp(this.application));\\n    21 |    }');\n  });\n});","define('lyricsss/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('lyricsss/tests/helpers/resolver', ['exports', 'lyricsss/resolver', 'lyricsss/config/environment'], function (exports, _lyricsssResolver, _lyricsssConfigEnvironment) {\n\n  var resolver = _lyricsssResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _lyricsssConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _lyricsssConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('lyricsss/tests/helpers/resolver.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - helpers/resolver.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jscs.');\n  });\n});","define('lyricsss/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('lyricsss/tests/helpers/start-app', ['exports', 'ember', 'lyricsss/app', 'lyricsss/config/environment'], function (exports, _ember, _lyricsssApp, _lyricsssConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _lyricsssConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _lyricsssApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('lyricsss/tests/helpers/start-app.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - helpers/start-app.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/start-app.js should pass jscs.\\ndisallowDirectPropertyAccess: Avoid accessing Ember.merge directly at helpers/start-app.js :\\n     6 |  let application;\\n     7 |\\n     8 |  let attributes = Ember.merge({}, config.APP);\\n---------------------------------^\\n     9 |  attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\\n    10 |\\ndisallowDirectPropertyAccess: Avoid accessing Ember.merge directly at helpers/start-app.js :\\n     7 |\\n     8 |  let attributes = Ember.merge({}, config.APP);\\n     9 |  attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\\n-----------------------------^\\n    10 |\\n    11 |  Ember.run(() => {\\ndisallowDirectPropertyAccess: Avoid accessing Ember.run directly at helpers/start-app.js :\\n     9 |  attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\\n    10 |\\n    11 |  Ember.run(() => {\\n---------------^\\n    12 |    application = Application.create(attributes);\\n    13 |    application.setupForTesting();');\n  });\n});","define('lyricsss/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('lyricsss/tests/integration/components/team-component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('team-component', 'Integration | Component | teams display control', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 25\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'teams-display-control', ['loc', [null, [1, 0], [1, 25]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.6.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'teams-display-control', [], [], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('lyricsss/tests/integration/components/team-component-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - integration/components/team-component-test.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/team-component-test.js should pass jscs.');\n  });\n});","define('lyricsss/tests/integration/components/team-component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/team-component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/team-component-test.js should pass jshint.');\n  });\n});","define('lyricsss/tests/integration/components/timer-component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('timer-component', 'Integration | Component | timer display control', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 25\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'timer-display-control', ['loc', [null, [1, 0], [1, 25]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.6.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'timer-display-control', [], [], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('lyricsss/tests/integration/components/timer-component-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - integration/components/timer-component-test.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/timer-component-test.js should pass jscs.');\n  });\n});","define('lyricsss/tests/integration/components/timer-component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/timer-component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/timer-component-test.js should pass jshint.');\n  });\n});","define('lyricsss/tests/integration/components/top-layout-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('top-layout', 'Integration | Component | top layout', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 14\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'top-layout', ['loc', [null, [1, 0], [1, 14]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.6.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'top-layout', [], [], 0, null, ['loc', [null, [2, 4], [4, 19]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('lyricsss/tests/integration/components/top-layout-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - integration/components/top-layout-test.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/top-layout-test.js should pass jscs.');\n  });\n});","define('lyricsss/tests/integration/components/top-layout-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/top-layout-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/top-layout-test.js should pass jshint.');\n  });\n});","define('lyricsss/tests/integration/components/word-history-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('word-history', 'Integration | Component | word history view controller', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 32\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'word-history-view-controller', ['loc', [null, [1, 0], [1, 32]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.6.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'word-history-view-controller', [], [], 0, null, ['loc', [null, [2, 4], [4, 37]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('lyricsss/tests/integration/components/word-history-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - integration/components/word-history-test.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/word-history-test.js should pass jscs.');\n  });\n});","define('lyricsss/tests/integration/components/word-history-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/word-history-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/word-history-test.js should pass jshint.');\n  });\n});","define('lyricsss/tests/models/past-word.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - models/past-word.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/past-word.js should pass jscs.\\ndisallowDirectPropertyAccess: Avoid accessing Ember.Object directly at models/past-word.js :\\n     2 |\\n     3 |// Data structure containing information about each word tried\\n     4 |export default Ember.Object.extend({\\n-----------------------------^\\n     5 |  // boolean\\n     6 |  answerCorrect: null,\\ndisallowDirectPropertyAccess: Avoid accessing Ember.computed directly at models/past-word.js :\\n    15 |  // string\\n    16 |  word: null,\\n    17 |  correctnessIcon: Ember.computed(\\'answerCorrect\\', function() {\\n----------------------------------^\\n    18 |    if (this.get(\\'answerCorrect\\') === true) {\\n    19 |      return this.get(\\'icons.correct\\');');\n  });\n});","define('lyricsss/tests/models/past-word.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/past-word.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/past-word.js should pass jshint.');\n  });\n});","define('lyricsss/tests/resolver.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - resolver.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jscs.');\n  });\n});","define('lyricsss/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('lyricsss/tests/router.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - router.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass jscs.\\ndisallowDirectPropertyAccess: Avoid accessing Ember.Router directly at router.js :\\n     2 |import config from \\'./config/environment\\';\\n     3 |\\n     4 |const Router = Ember.Router.extend({\\n-----------------------------^\\n     5 |  location: config.locationType\\n     6 |});');\n  });\n});","define('lyricsss/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('lyricsss/tests/routes/main.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - routes/main.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/main.js should pass jscs.\\ndisallowDirectPropertyAccess: Avoid accessing Ember.Route directly at routes/main.js :\\n     1 |import Ember from \\'ember\\';\\n     2 |\\n     3 |export default Ember.Route.extend({\\n-----------------------------^\\n     4 |  model() {\\n     5 |    return Ember.$.getJSON(\\\"data/752MostCommonLyricWordsInDictionary.json\\\");\\ndisallowDirectPropertyAccess: Avoid accessing Ember.$ directly at routes/main.js :\\n     3 |export default Ember.Route.extend({\\n     4 |  model() {\\n     5 |    return Ember.$.getJSON(\\\"data/752MostCommonLyricWordsInDictionary.json\\\");\\n-----------------------^\\n     6 |  }\\n     7 |});\\nvalidateQuoteMarks: Invalid quote mark found at routes/main.js :\\n     3 |export default Ember.Route.extend({\\n     4 |  model() {\\n     5 |    return Ember.$.getJSON(\\\"data/752MostCommonLyricWordsInDictionary.json\\\");\\n-----------------------------------^\\n     6 |  }\\n     7 |});');\n  });\n});","define('lyricsss/tests/routes/main.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/main.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/main.js should pass jshint.');\n  });\n});","define('lyricsss/tests/services/team-service.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - services/team-service.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/team-service.js should pass jscs.\\ndisallowDirectPropertyAccess: Avoid accessing Ember.Service directly at services/team-service.js :\\n     1 |import Ember from \\'ember\\';\\n     2 |\\n     3 |export default Ember.Service.extend({\\n------------------------------^\\n     4 |  active: \\'blue\\',\\n     5 |  blueScore: 0,');\n  });\n});","define('lyricsss/tests/services/team-service.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/team-service.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/team-service.js should pass jshint.');\n  });\n});","define('lyricsss/tests/services/timer-service.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - services/timer-service.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/timer-service.js should pass jscs.\\ndisallowDirectPropertyAccess: Avoid accessing Ember.Service directly at services/timer-service.js :\\n     1 |import Ember from \\'ember\\';\\n     2 |\\n     3 |export default Ember.Service.extend({\\n------------------------------^\\n     4 |  iconState: \\'glyphicon-pause\\',\\n     5 |  seconds: 0,\\ndisallowDirectPropertyAccess: Avoid accessing Ember.run directly at services/timer-service.js :\\n    12 |    } else {\\n    13 |      this.incrementProperty(\\'seconds\\', -1);\\n    14 |      this._timer = Ember.run.later(this, \\'_countdown\\', 1000);\\n---------------------------------^\\n    15 |    }\\n    16 |  },\\ndisallowDirectPropertyAccess: Avoid accessing Ember.run directly at services/timer-service.js :\\n    19 |  },\\n    20 |  pause() {\\n    21 |    Ember.run.cancel(this.get(\\'_timer\\'));\\n-----------------^\\n    22 |    this.set(\\'_timer\\', null);\\n    23 |    this.set(\\'iconState\\', \\'glyphicon-play\\');\\ndisallowDirectPropertyAccess: Avoid accessing Ember.run directly at services/timer-service.js :\\n    24 |  },\\n    25 |  reset() {\\n    26 |    Ember.run.cancel(this.get(\\'_timer\\'));\\n-----------------^\\n    27 |    this.set(\\'seconds\\', this.get(\\'timeLimit\\') + 1);\\n    28 |    this._countdown();\\ndisallowTrailingComma: Extra comma following the final element of an array or object literal at services/timer-service.js :\\n    40 |      this.resume();\\n    41 |    }\\n    42 |  },\\n-----------^\\n    43 |});\\n    44 |');\n  });\n});","define('lyricsss/tests/services/timer-service.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/timer-service.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/timer-service.js should pass jshint.');\n  });\n});","define('lyricsss/tests/services/word-service.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - services/word-service.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/word-service.js should pass jscs.\\ndisallowDirectPropertyAccess: Avoid accessing Ember.Service directly at services/word-service.js :\\n     2 |import PastWord from \\'lyricsss/models/past-word\\';\\n     3 |\\n     4 |export default Ember.Service.extend({\\n------------------------------^\\n     5 |  pastWords: [],\\n     6 |  upcomingWords: [],\\nrequireSpacesInsideObjectBrackets: One space required after opening curly brace at services/word-service.js :\\n     5 |  pastWords: [],\\n     6 |  upcomingWords: [],\\n     7 |  add({word, team, answerCorrect, time}) {\\n---------------^\\n     8 |    this.get(\\'pastWords\\').pushObject(PastWord.create({\\n     9 |      word,\\nrequireSpacesInsideObjectBrackets: One space required before closing curly brace at services/word-service.js :\\n     5 |  pastWords: [],\\n     6 |  upcomingWords: [],\\n     7 |  add({word, team, answerCorrect, time}) {\\n----------------------------------------------^\\n     8 |    this.get(\\'pastWords\\').pushObject(PastWord.create({\\n     9 |      word,');\n  });\n});","define('lyricsss/tests/services/word-service.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/word-service.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/word-service.js should pass jshint.');\n  });\n});","define('lyricsss/tests/test-helper', ['exports', 'lyricsss/tests/helpers/resolver', 'ember-qunit'], function (exports, _lyricsssTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_lyricsssTestsHelpersResolver['default']);\n});","define('lyricsss/tests/test-helper.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - test-helper.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jscs.');\n  });\n});","define('lyricsss/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('lyricsss/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('lyricsss/tests/unit/routes/application-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - unit/routes/application-test.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jscs.');\n  });\n});","define('lyricsss/tests/unit/routes/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('lyricsss/tests/unit/routes/lyrics-card-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:lyrics-card', 'Unit | Route | lyrics card', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('lyricsss/tests/unit/routes/lyrics-card-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - unit/routes/lyrics-card-test.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/lyrics-card-test.js should pass jscs.');\n  });\n});","define('lyricsss/tests/unit/routes/lyrics-card-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/lyrics-card-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/lyrics-card-test.js should pass jshint.');\n  });\n});","define('lyricsss/tests/unit/services/team-service-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:team-service', 'Unit | Service | team tracking', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('lyricsss/tests/unit/services/team-service-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - unit/services/team-service-test.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/team-service-test.js should pass jscs.');\n  });\n});","define('lyricsss/tests/unit/services/team-service-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/team-service-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/team-service-test.js should pass jshint.');\n  });\n});","define('lyricsss/tests/unit/services/timer-service-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:timer-service', 'Unit | Service | timer control', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('lyricsss/tests/unit/services/timer-service-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - unit/services/timer-service-test.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/timer-service-test.js should pass jscs.');\n  });\n});","define('lyricsss/tests/unit/services/timer-service-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/timer-service-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/timer-service-test.js should pass jshint.');\n  });\n});","define('lyricsss/tests/unit/services/words-service-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:word-service', 'Unit | Service | word history', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('lyricsss/tests/unit/services/words-service-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSCS - unit/services/words-service-test.js');\n  QUnit.test('should pass jscs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/words-service-test.js should pass jscs.');\n  });\n});","define('lyricsss/tests/unit/services/words-service-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/words-service-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/words-service-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('lyricsss/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"tests.js"}